configfile: "config/config.yaml"

import pandas as pd

# Load the metadata and get micros and timepoints
meta = pd.read_csv(config["metadata"],delimiter="\t")
MICROS = meta["micro"].unique()
TIMEPOINTS = meta["time"].unique()
BASELINE = config["baseline"]
TIMEPOINTS_NO_BASELINE = TIMEPOINTS[
    ~(TIMEPOINTS == BASELINE)]  # No zero point / intercept / nulpunt
ANALYSIS_METHOD = config["analysis_method"]

onstart: shell("bash workflow/scripts/0_cleanup_snakemake.sh")

onsuccess: shell("rm -rf Rplots.pdf || true")

rule all:
    input:
        expand("output/bubble/{micro}_{timepoint}.png", micro=MICROS, timepoint=TIMEPOINTS),
        "output/betadiversity/betadiversity.png",
        expand("data/diffential_gene_expression/DGE_{micro}.xlsx",micro=MICROS),
        expand("data/maaslin_output/maaslin_DGE_{micro}_{analysis_method}",micro=MICROS, analysis_method=ANALYSIS_METHOD),
        expand("output/figures_cytoscape/cytoscape_{micro}_{timepoint}.svg",micro=MICROS,timepoint=TIMEPOINTS_NO_BASELINE)

rule phyloseq_obj:
    input:
        countdata=config["countdata"],
        metadata=config["metadata"]
    output:
        physeq_out="data/phyloseq/physeq_obj.rds",
        physeq_out_rxn="data/phyloseq/physeq_obj_rxn.rds"
    conda:
        "envs/1_phyloseq.yaml"
    log:
        "logs/1_phyloseq.log"
    threads: 1
    script: "scripts/1_phyloseq_obj.R"

rule bubbleplot:
    input:
        physeq="data/phyloseq/physeq_obj_rxn.rds"
    output:
        png="output/bubble/{micro}_{timepoint}.png"
    params:
        micro="{micro}",
        timepoint="{timepoint}",
        top=config["top"]
    conda:
        "envs/1.5_bubble.yaml"
    log:
        "logs/1.5_bubble_{micro}_{timepoint}.log"
    threads: 1
    script:
        "scripts/1.5_bubbleplot.R"

rule betadiversity:
    input:
        physeq="data/phyloseq/physeq_obj_rxn.rds"
    output:
        png="output/betadiversity/betadiversity.png"
    params:
        micros=MICROS
    conda:
        "envs/1.5_beta.yaml"
    log:
        "logs/1.5_beta.log"
    threads: 1
    script:
        "scripts/1.5_beta_diversity.R"

rule differential_analysis_limma:
    input:
        physeq="data/phyloseq/physeq_obj.rds"
    output:
        dge_out="data/diffential_gene_expression/DGE_{micro}.xlsx"
    params:
        micro="{micro}"
    conda:
        "envs/2_limma.yaml"
    log:
        "logs/2_limma_{micro}.log"
    threads:
        min(config["limma_threads"], workflow.cores * 0.25)
    script:
        "scripts/2_limma.R"

rule differential_analysis_limma_rxn:
    input:
        physeq="data/phyloseq/physeq_obj_rxn.rds"
    output:
        dge_out="data/diffential_gene_expression/rxn_DGE_{micro}.xlsx"
    params:
        micro="{micro}"
    conda:
        "envs/2_limma.yaml"
    log:
        "logs/2_limma_rxn_{micro}.log"
    threads:
        min(config["limma_threads"], workflow.cores * 0.25)
    script:
        "scripts/2_limma.R"

rule differential_analysis_maaslin2:
    input:
        physeq="data/phyloseq/physeq_obj.rds"
    output:
        out_dir_maaslin=directory("data/maaslin_output/maaslin_DGE_{micro}_{analysis_method}")
    params:
        micro="{micro}",
        transformation=config["transformation"], # LOG, LOGIT, AST, NONE
        analysis_method=ANALYSIS_METHOD, # LM, CPLM
        baseline=BASELINE
    conda:
        "envs/2_maaslin2.yaml"
    log:
        "logs/2_maaslin_{micro}_{analysis_method}.log"
    threads: 2
    priority: 1
    script:
        "scripts/2_maaslin2.R"

rule GSEA_rankings:
    input:
        dge="data/diffential_gene_expression/rxn_DGE_{micro}.xlsx"
    output:
        out_rank="data/gsea_input/rxn_ranked_{micro}_{timepoint}.rnk"
    params:
        timepoint="{timepoint}"
    conda:
        "envs/3_gsea_input.yaml"
    log:
        "logs/3_gsea_input_{micro}_{timepoint}.log"
    threads: 1
    script:
        "scripts/3_gsea_input.R"

rule GSEA_run:
    input:
        rank="data/gsea_input/rxn_ranked_{micro}_{timepoint}.rnk",
        gmt="do_not_touch/gsea_input/metacyc_pathways.gmt"
    output:
        output_dir_gsea=directory("data/gsea_output/{micro}_{timepoint}")
    params:
        out_dir_gsea=directory("data/gsea_output"),
        rpt_label="{micro}_{timepoint}"
    log:
        "logs/3_gsea_run_{micro}_{timepoint}.log"
    threads: 1
    script:
        "scripts/3_gsea.sh"

rule prep_cytoscape:
    input:
        physeq="data/phyloseq/physeq_obj_rxn.rds"
    output:
        expression="data/enrichmentmap_input/expressions_{micro}_{timepoint}.txt",
        classes="data/enrichmentmap_input/classes_{micro}_{timepoint}.cls"
    params:
        baseline=BASELINE,
        micro="{micro}",
        timepoint="{timepoint}"
    conda:
        "envs/4_prep_cytoscape.yaml"
    log:
        "logs/4_prep_cytoscape_{micro}_{timepoint}.log"
    threads: 1
    script:
        "scripts/4_prep_cytoscape.R"

rule cytoscape_enrichmentmap:
    input:
        gsea="data/gsea_output/{micro}_{timepoint}",
        gmt="do_not_touch/gsea_input/metacyc_pathways.gmt",
        expression="data/enrichmentmap_input/expressions_{micro}_{timepoint}.txt",
        classes="data/enrichmentmap_input/classes_{micro}_{timepoint}.cls"
    output:
        image="output/figures_cytoscape/cytoscape_{micro}_{timepoint}.svg"
    resources:
        cytoscape_instances=1
    conda:
        "envs/4_cytoscape.yaml"
    log:
        "logs/4_cytoscape_{micro}_{timepoint}.log"
    script:
        "scripts/4_cytoscape.R"
